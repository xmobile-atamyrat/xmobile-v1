generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(uuid())
  name            String
  email           String      @unique
  password        String
  grade           UserRole    @default(FREE)
  phoneNumber     String?

  cartItems      CartItems[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

}


model CartItems {
  id              String      @id @default(uuid())
  quantity        Int         @default(0)

  users      User    @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId      String
  product     Product    @relation(references: [id], fields: [productId], onDelete: Cascade)
  productId       String


  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@unique([userId, productId])

}

model Category {
  id                              String      @id @default(uuid())
  name                            String

  predecessorId                   String?
  predecessorCategory             Category?   @relation("succCategory", references: [id], fields: [predecessorId], onDelete: Cascade)
  successorCategories             Category[]   @relation("succCategory")

  products                        Product[]

  imgUrl                          String?

  createdAt                       DateTime    @default(now())
  updatedAt                       DateTime    @updatedAt
}


model Product {
  id              String      @id @default(uuid())
  name            String
  description     String?
  imgUrls         String[]
  price           String?

  categories      Category    @relation(references: [id], fields: [categoryId], onDelete: Cascade)
  categoryId      String
  cartItems       CartItems[]

  tags            String[]
  videoUrls       String[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Prices {
  id              String      @id @default(uuid())
  name            String
  price           String    
  priceInTmt      String      @default("0")

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([price])
}

model UserVisitRecord {
  id  String  @id @default(uuid())
  ip  String
  dailyVisitCount Int @default(1)

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([createdAt, ip])
}

model DollarRate {
  id              Int         @id @default(autoincrement())
  rate            Float       
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum UserRole {
  FREE
  ADMIN
}