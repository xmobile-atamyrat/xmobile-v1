generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(uuid())
  name            String
  email           String      @unique
  password        String
  grade           UserRole    @default(FREE)
  phoneNumber     String?

  cartItems       CartItem[]
  chatSession     ChatSession[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}


model CartItem {
  id              String      @id @default(uuid())
  quantity        Int         @default(1)

  user            User        @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId          String

  product         Product     @relation(references: [id], fields: [productId], onDelete: Cascade)
  productId       String

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@unique([userId, productId])
}

model Category {
  id                              String      @id @default(uuid())
  name                            String

  predecessorId                   String?
  predecessorCategory             Category?   @relation("succCategory", references: [id], fields: [predecessorId], onDelete: Cascade)
  successorCategories             Category[]   @relation("succCategory")

  products                        Product[]

  imgUrl                          String?

  createdAt                       DateTime    @default(now())
  updatedAt                       DateTime    @updatedAt
}


model Product {
  id              String      @id @default(uuid())
  name            String
  description     String?
  imgUrls         String[]
  price           String?

  categories      Category    @relation(references: [id], fields: [categoryId], onDelete: Cascade)
  categoryId      String

  cartItems       CartItem[]

  tags            String[]
  videoUrls       String[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Prices {
  id              String      @id @default(uuid())
  name            String
  price           String    
  priceInTmt      String      @default("0")

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([price])
}

model UserVisitRecord {
  id              String  @id @default(uuid())
  ip              String
  dailyVisitCount Int @default(1)

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([createdAt, ip])
}

model DollarRate {
  id              Int         @id @default(autoincrement())
  rate            Float       
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Supplier {
  id                    String                  @id @default(uuid())
  name                  String
  description           String?

  calculationHistories  CalculationHistory[]    @relation("CalculationHistorySuppliers")

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model ProcurementProduct {
  id                      String                  @id @default(uuid())
  name                    String

  calculationHistories    CalculationHistory[]    @relation("CalculationHistoryProcurementProducts")

  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
}

model CalculationHistory {
  id                      String                  @id @default(uuid())
  name                    String
  prices                  Json?
  quantities              Json?

  suppliers               Supplier[]              @relation("CalculationHistorySuppliers")
  procurementProducts     ProcurementProduct[]    @relation("CalculationHistoryProcurementProducts")
  

  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
}

model ChatSession {
  id              String        @id @default(uuid())
  status          ChatStatus        @default(OPEN)

  user            User          @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId          String

  messages        ChatMessage[]

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

}

model ChatMessage {
  id              String        @id @default(cuid())
  senderId        String
  senderRole      UserRole
  content         String
  isRead          Boolean       @default(false)

  session         ChatSession   @relation(references: [id], fields: [sessionId], onDelete: Cascade)
  sessionId       String
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([sessionId, createdAt])
}

enum ChatStatus {
  CLOSED
  OPEN
}

enum UserRole {
  FREE
  ADMIN
  SUPERUSER
}
