generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  name            String
  email           String          @unique
  password        String
  grade           UserRole        @default(FREE)
  phoneNumber     String?

  cartItems       CartItem[]
  chatSessions    ChatSession[]

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}


model CartItem {
  id              String      @id @default(uuid())
  quantity        Int         @default(1)

  user            User        @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId          String

  product         Product     @relation(references: [id], fields: [productId], onDelete: Cascade)
  productId       String

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@unique([userId, productId])
}

model Category {
  id                              String      @id @default(uuid())
  name                            String

  predecessorId                   String?
  predecessorCategory             Category?   @relation("succCategory", references: [id], fields: [predecessorId], onDelete: Cascade)
  successorCategories             Category[]   @relation("succCategory")

  products                        Product[]

  imgUrl                          String?

  createdAt                       DateTime    @default(now())
  updatedAt                       DateTime    @updatedAt
}


model Product {
  id              String      @id @default(uuid())
  name            String
  description     String?
  imgUrls         String[]
  price           String?

  categories      Category    @relation(references: [id], fields: [categoryId], onDelete: Cascade)
  categoryId      String

  cartItems       CartItem[]

  tags            String[]
  videoUrls       String[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Prices {
  id              String      @id @default(uuid())
  name            String
  price           String    
  priceInTmt      String      @default("0")

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([price])
}

model UserVisitRecord {
  id              String  @id @default(uuid())
  ip              String
  dailyVisitCount Int @default(1)

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([createdAt, ip])
}

model DollarRate {
  id                  Int         @id @default(autoincrement())
  rate                Float
  currency            String      @default("TMT")   

  procurementOrders   ProcurementOrder[]

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@unique([currency])
}

model ChatSession {
  id              String        @id @default(uuid())
  status          ChatStatus    @default(PENDING)

  users           User[]

  messages        ChatMessage[]

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

}

model ChatMessage {
  id              String        @id @default(cuid())
  senderId        String
  senderRole      UserRole
  content         String
  isRead          Boolean       @default(false)

  session         ChatSession   @relation(references: [id], fields: [sessionId], onDelete: Cascade)
  sessionId       String
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([sessionId, createdAt])
}

enum ChatStatus {
  CLOSED
  ACTIVE
  PENDING
}

model ProcurementSupplier {
  id                    String                  @id @default(uuid())
  name                  String
  description           String?

  order                 ProcurementOrderSupplier[]
  values                ProcurementSupplierProductPrice[]  @relation("ProcurementSupplierValue")

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  @@unique([name])
}

model ProcurementProduct {
  id                      String                  @id @default(uuid())
  name                    String

  order                   ProcurementOrderProduct[]
  values                  ProcurementSupplierProductPrice[]  @relation("ProcurementProductValue")
  quantities              ProcurementOrderProductQuantity[]  @relation("ProcurementProductQuantity")

  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  @@unique([name])
}

model ProcurementOrder {
  id                      String                  @id @default(uuid())
  name                    String

  suppliers               ProcurementOrderSupplier[]
  products                ProcurementOrderProduct[]
  prices                  ProcurementSupplierProductPrice[]  @relation("ProcurementOrderValue")
  productQuantities       ProcurementOrderProductQuantity[]  @relation("ProcurementOrderProductQuantity")
  
  currency                  String                 @default("TMT")                  
  dollarRate                DollarRate             @relation(fields: [currency], references: [currency], onDelete: Cascade)

  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
}

model ProcurementOrderSupplier {
  id          String              @id @default(uuid())

  order       ProcurementOrder    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String

  supplier    ProcurementSupplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId  String
  
  createdAt   DateTime            @default(now())

  @@unique([orderId, supplierId])
}

model ProcurementOrderProduct {
  id          String              @id @default(uuid())

  order       ProcurementOrder    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String

  product     ProcurementProduct  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  
  createdAt   DateTime            @default(now())

  @@unique([orderId, productId])
}

model ProcurementOrderProductQuantity {
  id                      String                  @id @default(uuid())
  orderId                 String
  productId               String
  quantity                Int?

  order                   ProcurementOrder      @relation("ProcurementOrderProductQuantity", fields: [orderId], references: [id], onDelete: Cascade)
  product                 ProcurementProduct    @relation("ProcurementProductQuantity", fields: [productId], references: [id], onDelete: Cascade)

  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  @@unique([orderId, productId])
}

model ProcurementSupplierProductPrice {
  id                      String                  @id @default(uuid())
  supplierId              String
  productId               String
  orderId                 String
  price                   Float?

  supplier                ProcurementSupplier   @relation("ProcurementSupplierValue", fields: [supplierId], references: [id], onDelete: Cascade)
  product                 ProcurementProduct    @relation("ProcurementProductValue", fields: [productId], references: [id], onDelete: Cascade)
  order                   ProcurementOrder      @relation("ProcurementOrderValue", fields: [orderId], references: [id], onDelete: Cascade)

  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  @@unique([supplierId, productId, orderId])
}

enum UserRole {
  FREE
  ADMIN
  SUPERUSER
}
